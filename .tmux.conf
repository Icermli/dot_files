###########################
##  Configuration
############################

# Get rid of ALL old bindings
# including default ones
# unbind-key -a

# fix clipboard issues on MacOS Sierra
#if-shell 'test "$(uname -s)" = Darwin' 'source-file $HOME/.tmux-osx.conf'

# use 256 term for pretty colors
set -g default-terminal "screen-256color"

# increase scroll-back history
set -g history-limit 100000

# use vim key bindings
setw -g mode-keys vi

# allow using mouse
# Note: this only works for tmux version >= 2.1
set -g mouse on
#bind -n WheelUpPane   select-pane -t= \; copy-mode -e \; send-keys -M
#bind -n WheelDownPane select-pane -t= \;                 send-keys -M

# Copy mouse-selected text to clipboard
bind-key -T copy-mode-vi MouseDragEnd1Pane send -X copy-pipe "xclip" \; display-message "Copied to clipboard."

# decrease command delay (increase vim responsiveness)
set -g escape-time 1

# Setup 'v' to begin selection as in Vim
bind-key -T copy-mode-vi v send -X begin-selection
bind-key -T copy-mode-vi y send -X copy-pipe "xclip" \; display-message "Copied to clipboard."

# increase repeat time for repeatable commands
set -g repeat-time 1000

# start window index at 1
set -g base-index 1

# start pane index at 1
set -g pane-base-index 1

# highlight window when it has new activity
setw -g monitor-activity on
set -g visual-activity on

# re-number windows when one is closed
set -g renumber-windows on

# rename window to reflect current program
set -g automatic-rename on

# set terminal title
set -g set-titles on
set -g set-titles-string '#h ❐ #S ● #I #W'

set -g display-panes-time 800 # slightly longer pane indicators display time
set -g display-time 1000      # slightly longer status messages display time

# 24 hour clock
setw -g clock-mode-style 24

# Rather than constraining window size to the maximum size of any client
# connected to the *session*, constrain window size to the maximum size of any
# client connected to *that window*. Much more reasonable.
setw -g aggressive-resize on

###########################
##  Key Bindings
############################

# tmux prefix
unbind C-b
set -g prefix 'C-a'
bind-key 'C-k' send-prefix

# quickly reload .tmux.conf
unbind r
bind r source-file ~/.tmux.conf \; display "Reloaded!"

# new window
bind c new-window

# window splitting
unbind %
bind | split-window -h -c "#{pane_current_path}"
unbind '"'
bind - split-window -v -c "#{pane_current_path}"

set-environment -g PATH "/usr/local/bin:/bin:/usr/bin"

# Enhanced C-l that now clears both screen and history
bind ` send-keys C-l \; run 'tmux clear-history'

# switch panes (arrow keys still work)
# bind h select-pane -L
# bind j select-pane -D
# bind k select-pane -U
# bind l select-pane -R

# For vim-tmux-navigator
# Smart pane switching with awareness of Vim splits.
# See: https://github.com/christoomey/vim-tmux-navigator
is_vim="ps -o state= -o comm= -t '#{pane_tty}' \
    | grep -iqE '^[^TXZ ]+ +(\\S+\\/)?g?(view|n?vim?x?)(diff)?$'"
#bind-key -n C-h if-shell "$is_vim" "send-keys C-h"  "select-pane -L"
#bind-key -n C-j if-shell "$is_vim" "send-keys C-j"  "select-pane -D"
#bind-key -n C-k if-shell "$is_vim" "send-keys C-k"  "select-pane -U"
#bind-key -n C-l if-shell "$is_vim" "send-keys C-l"  "select-pane -R"
#bind-key -n C-\ if-shell "$is_vim" "send-keys C-\\" "select-pane -l"

# Caveat: only works in normal mode
bind h if-shell "$is_vim" "send-keys :TmuxNavigateLeft Enter"  "select-pane -L"
bind j if-shell "$is_vim" "send-keys :TmuxNavigateDown Enter"  "select-pane -D"
bind k if-shell "$is_vim" "send-keys :TmuxNavigateUp Enter"  "select-pane -U"
bind l if-shell "$is_vim" "send-keys :TmuxNavigateRight Enter"  "select-pane -R"
bind \ if-shell "$is_vim" "send-keys :TmuxNavigatePrevious Enter" "select-pane -l"

# resize panes
bind H resize-pane -L 5
bind J resize-pane -D 5
bind K resize-pane -U 5
bind L resize-pane -R 5

bind -r C-h select-window -t :-
bind -r C-l select-window -t :+

# repeat last shell command on the right pane (if
# it happens to be a shell)
# binding to "m" for "make"
bind m select-pane -t 2 \; \
  send-keys q C-c C-m clear C-m \
  tmux Space clear-history C-m \
  Up Up Up C-m \; \
  last-pane

# enter copy-mode
bind-key -n C-q copy-mode

# History navigation
bind-key -T copy-mode-vi Home send -X history-top
bind-key -T copy-mode-vi End send -X history-bottom
bind-key -T copy-mode-vi -n S-PPage send -X halfpage-up
bind-key -T copy-mode-vi -n S-NPage send -X halfpage-down

# swap right pane in window 1 with default pane in window 2
#
# This binding does the following:
#
# binding to "p" for "pane_swap"
# make sure our current window is listed as 1
# create a second window if it does not exist
# select our 1 window again in case we created a new one
# select our 2nd pane in 1 window
# join that pane to window 2
# select the pane above the one we just moved there
# move that pane to window 1
#bind p \
#  if-shell 'tmux select-window -t :1' '' 'move-window -t :1' \; \
#  if-shell 'test $(tmux list-panes | wc -l) -gt 1' '' 'split-window -h' \; \
#  if-shell 'tmux select-window -t :2' '' 'new-window' \; \
#  select-window -t 1 \; \
#  select-pane -t 2 \; \
#  join-pane -t 2.1 \; \
#  select-pane -U \; \
#  join-pane -h -t 1.1 \; \
#  last-pane

###########################
## Status Bar
############################

# turn the status bar on
set-option -g status on
set -g status-position bottom
# set -g status-bg colour234
# set -g status-fg colour137
set -g status-style dim

# set update frequencey (default 15 seconds)
set -g status-interval 2

# center the status bar for clarity
set -g status-justify left

# show host name, session, window, pane in the left
set -g status-left-length 50
set -g status-left ' '
# set -g status-left "#[fg=blue]:: #[fg=green]#h #[fg=blue]:: #[fg=green]Session #[fg=red]#S #[fg=blue]:: #[fg=green]Window #[fg=red]#I #[fg=blue]:: #[fg=green]Pane #[fg=red]#P #[fg=blue]::"

# date and time on right side
set -g status-right-length 60
# set -g status-right "#[fg=blue]:: #[fg=green]%d %b %Y #[fg=blue]::#[fg=green]%l:%M %p #[fg=blue]:: "
set -g status-right '#[fg=colour233,bg=colour241,bold] %d/%m #[fg=colour233,bg=colour245,bold] %H:%M:%S '

# from tmuxline.vim
if-shell "test -f ~/.tmux-status.conf" "source ~/.tmux-status.conf"
if-shell "test -f ~/cli-utils/tmuxline" "source ~/cli-utils/tmuxline"

# time dependent tmuxline
# if-shell "if test $(date +'%k') -lt '18' && test $(date +'%k') -gt '6'; then true; else false; fi" "source-file ~/cli-utils/tmuxline_light"
# if-shell "if test $(date +'%k') -lt '18' && test $(date +'%k') -gt '6'; then false; else true; fi" "source-file ~/cli-utils/tmuxline_dark"

# manually enforced
# if-shell "if [ '$COLORTHEME' = light ]; then true; else false; fi" "source-file ~/cli-utils/tmuxline_light"
# if-shell "if [ '$COLORTHEME' = dark ]; then true; else false; fi" "source-file ~/cli-utils/tmuxline_dark"

###########################
# Window
###########################
#window mode
# setw -g mode-bg colour6
# setw -g mode-fg colour0

# window status
# setw -g window-status-current-format ' #I#[fg=colour250]:#[fg=colour255]#W#[fg=colour50]#F '
# setw -g window-status-current-format " #F#I:#W#F "
#setw -g window-status-format ' #I#[fg=colour237]:#[fg=colour250]#W#[fg=colour244]#F '
# setw -g window-status-current-format "#[bg=brightmagenta]#[fg=colour8] #I #[fg=colour8]#[bg=colour14] #W "
#setw -g window-status-current-fg colour81
#setw -g window-status-current-bg colour238
#setw -g window-status-current-attr dim
#setw -g window-status-bg colour235
#setw -g window-status-fg colour138
#setw -g window-status-attr none

#setw -g window-status-bell-attr bold
#setw -g window-status-bell-fg colour255
#setw -g window-status-bell-bg colour1

###########################
## Colors
############################

# color for status bar
# set-option -g status-bg colour235
# set-option -g status-fg white

# colorize messages in the command line
# set-option -g message-bg black #base02
# set-option -g message-fg brightred #orange

# messaging
#set -g message-fg colour232
#set -g message-bg colour166
set -g message-style bold
#set -g message-command-fg blue
#set -g message-command-bg black

# The modes
#setw -g clock-mode-colour colour135
setw -g mode-style bold
#setw -g mode-fg colour196
#setw -g mode-bg colour238

# The panes
#set -g pane-border-bg colour235
#set -g pane-border-fg colour100
#set -g pane-active-border-bg colour239
#set -g pane-active-border-fg colour51

############################
# Verbosity
############################

# loud or quiet?
set-option -g visual-activity off
set-option -g visual-bell off
set-option -g visual-silence off
set-window-option -g monitor-activity off
set-option -g bell-action none

# Clock
bind-key          t clock-mode

bind-key          p display-panes
set -g display-panes-time 100000 # longer pane indicators display time
set -g display-time 10000      # longer status messages display time

############################
# Some of the defaults
############################
bind-key          d detach-client
bind-key          0 select-window -t :0
bind-key          1 select-window -t :1
bind-key          2 select-window -t :2
bind-key          3 select-window -t :3
bind-key          4 select-window -t :4
bind-key          5 select-window -t :5
bind-key          6 select-window -t :6
bind-key          7 select-window -t :7
bind-key          8 select-window -t :8
bind-key          9 select-window -t :9
bind-key          : command-prompt
bind-key          ? list-keys
bind-key          i display-message
bind-key          { swap-pane -U
bind-key          } swap-pane -D
bind-key          v copy-mode


############################
# Tmux Plugin Manager
############################
#
# Hit prefix + I to fetch the plugin and source it.

# List of plugins
set -g @plugin 'tmux-plugins/tpm'
set -g @plugin 'tmux-plugins/tmux-resurrect'
set -g @plugin 'tmux-plugins/tmux-open'
# set -g @plugin 'seebi/tmux-colors-solarized'

# Options
#
# choose theme based on clock time
# if-shell "if test $(date +'%k') -lt '18' && test $(date +'%k') -gt '6'; then true; else false; fi" "set -g @colors-solarized 'light'" # other options: dark, light, base16
# if-shell "if test $(date +'%k') -lt '18' && test $(date +'%k') -gt '6'; then flase; else true; fi" "set -g @colors-solarized 'dark'" # other options: dark, light, base16

# if-shell "if [ '$COLORTHEME' = light ]; then true; else false; fi" "set -g @colors-solarized 'light'" # other options: dark, light, base16
# if-shell "if [ j$COLORTHEME' = dark ]; then true; else false; fi" "set -g @colors-solarized 'dark'" # other options: dark, light, base16

# Other examples:
# set -g @plugin 'github_username/plugin_name'
# set -g @plugin 'git@github.com/user/plugin'
# set -g @plugin 'git@bitbucket.com/user/plugin'

# Initialize TMUX plugin manager (keep this line at the very bottom of tmux.conf)
run '~/.tmux/plugins/tpm/tpm'
